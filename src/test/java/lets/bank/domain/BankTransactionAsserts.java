/* 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package lets.bank.domain;

import static lets.bank.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BankTransactionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankTransactionAllPropertiesEquals(BankTransaction expected, BankTransaction actual) {
        assertBankTransactionAutoGeneratedPropertiesEquals(expected, actual);
        assertBankTransactionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankTransactionAllUpdatablePropertiesEquals(BankTransaction expected, BankTransaction actual) {
        assertBankTransactionUpdatableFieldsEquals(expected, actual);
        assertBankTransactionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankTransactionAutoGeneratedPropertiesEquals(BankTransaction expected, BankTransaction actual) {
        // empty method
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankTransactionUpdatableFieldsEquals(BankTransaction expected, BankTransaction actual) {
        assertThat(actual)
            .as("Verify BankTransaction relevant properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getChannel()).as("check channel").isEqualTo(expected.getChannel()))
            .satisfies(a ->
                assertThat(a.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getAmount())
            )
            .satisfies(a ->
                assertThat(a.getBalance()).as("check balance").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getBalance())
            )
            .satisfies(a -> assertThat(a.getTargetAccountId()).as("check targetAccountId").isEqualTo(expected.getTargetAccountId()))
            .satisfies(a -> assertThat(a.getTransactionDate()).as("check transactionDate").isEqualTo(expected.getTransactionDate()))
            .satisfies(a -> assertThat(a.getRemark()).as("check remark").isEqualTo(expected.getRemark()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()))
            .satisfies(a -> assertThat(a.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(expected.getLastModifiedBy()))
            .satisfies(a -> assertThat(a.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(expected.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankTransactionUpdatableRelationshipsEquals(BankTransaction expected, BankTransaction actual) {
        assertThat(actual)
            .as("Verify BankTransaction relationships")
            .satisfies(a -> assertThat(a.getAccount()).as("check account").isEqualTo(expected.getAccount()));
    }
}
